datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @unique @default(uuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Member StoryMember[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password Password?
  Session  Session[]
  stories  Story[]
  pages    Page[]
  choices  Choice[]
  Member   StoryMember[]
  roles    Role[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Story {
  id           String        @id @unique @default(cuid())
  title        String
  description  String
  firstPage    Page?         @relation(fields: [firstPageId], references: [id])
  firstPageId  String?
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId      String
  storyMembers StoryMember[]
  isPublic     Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoryMember {
  id           String     @id @unique @default(cuid())
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  story        Story      @relation(fields: [storyId], references: [id])
  storyId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Each page has choices
// Each choice has a page
// derived: each page can have one or more parent choices
// derived: each choice has a parent page
model Page {
  id              String   @id @unique @default(cuid())
  content         String
  Story           Story[]
  nextChoices     Choice[] @relation(name: "NextChoices")
  previousChoices Choice[] @relation(name: "NextPage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String
}

model Choice {
  id           String  @id @unique @default(cuid())
  content      String
  parentPage   Page    @relation(name: "NextChoices", fields: [parentPageId], references: [id], onDelete: Cascade)
  parentPageId String
  nextPage     Page?   @relation(name: "NextPage", fields: [nextPageId], references: [id])
  nextPageId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String
}
